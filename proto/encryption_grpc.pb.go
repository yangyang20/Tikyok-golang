// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: encryption.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TikTokClient is the client API for TikTok service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TikTokClient interface {
	// Sends a greeting
	SayEncryption(ctx context.Context, in *EncryptionRequest, opts ...grpc.CallOption) (*EncryptionReply, error)
}

type tikTokClient struct {
	cc grpc.ClientConnInterface
}

func NewTikTokClient(cc grpc.ClientConnInterface) TikTokClient {
	return &tikTokClient{cc}
}

func (c *tikTokClient) SayEncryption(ctx context.Context, in *EncryptionRequest, opts ...grpc.CallOption) (*EncryptionReply, error) {
	out := new(EncryptionReply)
	err := c.cc.Invoke(ctx, "/tiktok.TikTok/SayEncryption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TikTokServer is the server API for TikTok service.
// All implementations must embed UnimplementedTikTokServer
// for forward compatibility
type TikTokServer interface {
	// Sends a greeting
	SayEncryption(context.Context, *EncryptionRequest) (*EncryptionReply, error)
	mustEmbedUnimplementedTikTokServer()
}

// UnimplementedTikTokServer must be embedded to have forward compatible implementations.
type UnimplementedTikTokServer struct {
}

func (UnimplementedTikTokServer) SayEncryption(context.Context, *EncryptionRequest) (*EncryptionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayEncryption not implemented")
}
func (UnimplementedTikTokServer) mustEmbedUnimplementedTikTokServer() {}

// UnsafeTikTokServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TikTokServer will
// result in compilation errors.
type UnsafeTikTokServer interface {
	mustEmbedUnimplementedTikTokServer()
}

func RegisterTikTokServer(s grpc.ServiceRegistrar, srv TikTokServer) {
	s.RegisterService(&TikTok_ServiceDesc, srv)
}

func _TikTok_SayEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TikTokServer).SayEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tiktok.TikTok/SayEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TikTokServer).SayEncryption(ctx, req.(*EncryptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TikTok_ServiceDesc is the grpc.ServiceDesc for TikTok service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TikTok_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tiktok.TikTok",
	HandlerType: (*TikTokServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayEncryption",
			Handler:    _TikTok_SayEncryption_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "encryption.proto",
}
